// AutoGenerated file for ChatMessageController
// generate date: 16/10/24 08:01 PM
import 'dart:math';

import 'package:get/get.dart';
import 'package:globipay_admin_panel/core/base/base_controller.dart';
import 'package:globipay_admin_panel/core/data/local/repository/token_repository.dart';
import 'package:globipay_admin_panel/core/data/model/pagination_request.dart';
import 'package:globipay_admin_panel/core/di/injector.dart';
import 'package:globipay_admin_panel/core/services/storage/app_preferences_service.dart';
import 'package:globipay_admin_panel/core/widgets/app_print.dart';
import 'package:globipay_admin_panel/data/repository/app_repository.dart';
import 'package:globipay_admin_panel/data/services/supabase_service.dart';
import 'package:globipay_admin_panel/entity/response/chat_item/chat_item_response_entity.dart';
import 'package:globipay_admin_panel/entity/response/chat_session_response/chat_session_response.dart';
import 'package:globipay_admin_panel/modules/chat/controller/chat_shared_controller.dart';
import 'package:globipay_admin_panel/router/app_routes.dart';
import 'package:globipay_admin_panel/router/route_path.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/**
 * Created by Abdullah on 16/10/24 08:01 PM.
 */
class ChatMessageController extends BaseController {
  AppRepository _appRepository;

  TokenRepository tokenRepository;
  final ChatSharedController sharedController = Injector.resolve<ChatSharedController>();

  ChatMessageController(this._appRepository, this.tokenRepository);

  //Rx Variables
  RxList<ChatSessionResponse> chatList = RxList<ChatSessionResponse>([]);
  var userName = "".obs;
  final supabase = SupabaseService().client;
  @override
  onInit() {
    super.onInit();
    _listenForChatSessionChanges();
    requestForMessageList();
    _getUserInfo();
  }


  void _getUserInfo() async {
    final name = await PreferencesService.getString(PreferencesService.USER_NAME);
    userName.value = name ?? "";
  }

  PaginationRequest generatePaginationRequest() {
    return PaginationRequest(limit: 20, page: 1);
  }

  void goToChatScreen()async{

    final userID = await tokenRepository.getStuffId();
    sharedController.setCurrentUserId(userID);
    AppRoutes.pushNamed(RoutePath.chat);

  }

  void fetchCustomerChatSessions() async {
    try {
      //final userID = await tokenRepository.getUserID();

      // Execute the remote procedure call
      final response = await supabase
          .rpc('a_chat_session',);

      // Since the response is a list, check if it is empty
      if (response == null || (response as List).isEmpty) {
        throw Exception('Failed to fetch chat sessions: No data found.');
      }

      // Debugging log to see raw data
      appPrint('Response data: $response');

      // Map the result to your chat session entities
      final chatSessions = (response as List)
          .map((item) => ChatSessionResponse.fromJson(item))
          .toList();

      // Update your chat list with the fetched chat sessions
      chatList.value = chatSessions;
      appPrint('Chat sessions: ${chatList.value.length}');

    } catch (e) {
      appPrint('Exception while loading chat sessions: $e');
    }
  }



  void onMessageItemClicked(ChatSessionResponse message) async{

   appPrint("Session ID  : ${message.session_id}");

    sharedController.setChatSessionId(message.session_id);
    sharedController.setCustomerID(message.customer_id);
    goToChatScreen();

  }

  void onAudioCall() {
    AppRoutes.pushNamed(RoutePath.audioCall);
  }

  void onVideoCall() {
    AppRoutes.pushNamed(RoutePath.videoCall);
  }

  // Network call

  String getRandomUrl() {
    var temp = [
      "https://img.icons8.com/?size=512&id=Iirw95F6Nl9c&format=png",
      "https://content.builtformars.com/uploads/images/Cashapp-company-logo.jpg",
      "https://www.freepnglogos.com/uploads/google-logo-png/google-logo-icon-png-transparent-background-osteopathy-16.png",
      "https://static.vecteezy.com/system/resources/previews/013/948/549/non_2x/google-logo-on-transparent-white-background-free-vector.jpg",
      "https://cdn.iconscout.com/icon/free/png-512/free-apple-pay-logo-icon-download-in-svg-png-gif-file-formats--payment-method-social-media-pack-design-development-icons-4069416.png?f=webp&w=256"
    ];
    var random = new Random();
    var randomIndex = random.nextInt(temp.length);
    return temp[randomIndex];
  }

  void requestForMessageList() {
    fetchCustomerChatSessions();
  }

  void _listenForChatSessionChanges() {
    appPrint('Setting up listener for chat session changes...');

    final channel = supabase.channel('public:chat_sessions')
      ..on(
        RealtimeListenTypes.postgresChanges,
        ChannelFilter(
          event: 'INSERT',
          schema: 'public',
          table: 'chat_sessions',
        ),
            (payload, [ref]) async {
          if (payload['new'] != null) {
            final newSession = payload['new'] ;
            update();
            _updateUI(newSession);
            appPrint('New chat session INSERT: ${newSession}');
          }
        },
      )
      ..on(
        RealtimeListenTypes.postgresChanges,
        ChannelFilter(
          event: 'UPDATE',
          schema: 'public',
          table: 'chat_sessions',
        ),
            (payload, [ref]) async {
          if (payload['new'] != null) {
            final newSession = payload['new'] ;
            update();
            _updateUI(newSession);

            appPrint('New UPDATED chat session UPDATE: ${newSession}');
          }
        },
      ).subscribe();
  }

  _updateUI(Map<String, dynamic> newSession) {
    final chatSession = ChatSessionResponse.fromJson(newSession);
    final index = chatList.indexWhere((element) => element.session_id == chatSession.session_id);
    if (index != -1) {
      if (chatSession.is_sender_typing ?? false == true) {
        chatList[index].last_message = "Typing...";
      } else if (chatSession.is_receiver_typing ?? false == true) {
        chatList[index].last_message = "Typing...";
      } else {
        chatList[index].last_message = chatSession.last_message;
        chatList[index].message_type = chatSession.message_type;
        chatList[index].last_message_timestamp = chatSession.last_message_timestamp;
      }
    }
    chatList.refresh();
  }
}
